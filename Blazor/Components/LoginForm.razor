@using DomainModels
@using Blazor.Services
@inject AuthenticationService AuthService
@inject NavigationManager Navigation

<div class="vacation-login-container">
    @if (showLoginForm)
    {
        <div class="card vacation-card">
            <div class="card-body">
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger" role="alert">
                        @errorMessage
                        @* indtil at vi kan vise en countdown timer, så vis hvor lang tid der er indtil den er nået null *@
                        @if (remainingLockoutSeconds > 0)
                        {
                            <br />
                            <small>Try again in @remainingLockoutSeconds seconds</small>
                        }
                    </div>
                }

                @* Vis success besked hvis man er logget ind *@
                @if (!string.IsNullOrEmpty(successMessage))
                {
                    <div class="alert alert-success" role="alert">
                        @successMessage
                    </div>
                }

                <EditForm Model="@loginModel" OnValidSubmit="@HandleLogin">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="text-danger" />

                    <div class="form-group mb-3">
                        <label for="email" class="form-label">Email</label>
                        <InputText id="email" @bind-Value="loginModel.Email" class="form-control" placeholder="Your Email" disabled="@isLoading" />
                        <ValidationMessage For="@(() => loginModel.Email)" class="text-danger" />
                    </div>

                    <div class="form-group mb-3">
                        <label for="password" class="form-label">Password</label>
                        <InputText id="password" type="password" @bind-Value="loginModel.Password" class="form-control" placeholder="Your Password" disabled="@isLoading" />
                        <ValidationMessage For="@(() => loginModel.Password)" class="text-danger" />
                    </div>

                    <div class="form-group mb-3">
                        <button type="submit" class="btn btn-primary w-100" disabled="@isLoading">
                            @if (isLoading)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                <text>Logger ind...</text>
                            }
                            else
                            {
                                <text>Log ind</text>
                            }
                        </button>
                    </div>
                </EditForm>

                <div class="text-center">
                    <small class="text-muted">
                        Need a account
                        <button class="btn btn-link p-0" @onclick="ShowRegister" disabled="@isLoading">
                            Make one here
                        </button>
                    </small>
                </div>
            </div>
        </div>
    }

    @if (showRegisterForm)
    {
        <div class="card mt-3">
            <div class="card-header">
                <h3>Make a new account</h3>
            </div>
            <div class="card-body">
                <EditForm Model="@registerModel" OnValidSubmit="@HandleRegister">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="text-danger" />

                    <div class="form-group mb-3">
                        <label for="reg-email" class="form-label">Email</label>
                        <InputText id="reg-email" @bind-Value="registerModel.Email" class="form-control" placeholder="Your Email" disabled="@isLoading" />
                        <ValidationMessage For="@(() => registerModel.Email)" class="text-danger" />
                    </div>

                    <div class="form-group mb-3">
                        <label for="reg-password" class="form-label">Password</label>
                        <InputText id="reg-password" type="password" @bind-Value="registerModel.Password" class="form-control" placeholder="Your Password" disabled="@isLoading" />
                        <ValidationMessage For="@(() => registerModel.Password)" class="text-danger" />
                    </div>

                    <div class="form-group mb-3">
                        <button type="submit" class="btn btn-success w-100" disabled="@isLoading">
                            @if (isLoading)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                <text>Making account...</text>
                            }
                            else
                            {
                                <text>Make account</text>
                            }
                        </button>
                    </div>
                </EditForm>

                <div class="text-center">
                    <button class="btn btn-link" @onclick="HideRegister" disabled="@isLoading">
                        Back to login
                    </button>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private LoginDto loginModel = new();
    private RegisterDto registerModel = new();
    private bool isLoading = false;
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;
    private bool showRegisterForm = false;
    private bool showLoginForm = true;
    private int remainingLockoutSeconds = 0;


    private bool isSubmitting = false;

    [Parameter] public EventCallback OnLoginSuccess { get; set; }
    [Parameter] public EventCallback OnRegisterSuccess { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Tjek om brugeren allerede er logget ind
        if (await AuthService.IsAuthenticatedAsync())
        {
            Navigation.NavigateTo("/");
        }
    }

    private async Task HandleLogin()
    {
        isLoading = true;
        errorMessage = string.Empty;
        successMessage = string.Empty;
        remainingLockoutSeconds = 0;
        StateHasChanged();

        try
        {
            var result = await AuthService.LoginAsync(loginModel);

            if (result.Success)
            {
                successMessage = "Login succesfuldt! Omdirigerer...";
                StateHasChanged();

                // Vent kort så brugeren kan se success besked (1 sekunds ventetid)
                await Task.Delay(1000);

                // Trigger event for parent component
                await OnLoginSuccess.InvokeAsync();

                // Naviger til forsiden
                Navigation.NavigateTo("/");
            }
            else
            {
                errorMessage = result.Message;
                remainingLockoutSeconds = result.RemainingLockoutSeconds;

                if (result.DelayApplied > 0)
                {
                    errorMessage += $" (Forsinkelse på {result.DelayApplied} sekunder blev anvendt)";
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Der opstod en uventet fejl. Prøv igen.";
            Console.WriteLine($"Login fejl: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }


    private async Task HandleRegister()
    {
        isSubmitting = true;
        errorMessage = string.Empty;
        successMessage = string.Empty;
        StateHasChanged();

        try
        {
            var result = await ApiService.RegisterAsync(registerModel);

            if (result.Success)
            {
                successMessage = result.Message ?? "Konto oprettet succesfuldt! Du kan nu logge ind.";
                showRegisterForm = false;
                var currentEmail = registerModel.Email; // Gem email før reset
                registerModel = new RegisterDto(); // Reset form

                // Kopier email til login form (Virker ikke pga. at login redirecter til forsiden)
                loginModel.Email = currentEmail;

                // Vent kort så brugeren kan se success besked
                await Task.Delay(1000);

                // Naviger til forsiden
                Navigation.NavigateTo("/");
            }
            else
            {
                errorMessage = result.Message ?? "Der opstod en fejl ved oprettelse af kontoen.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Der opstod en uventet fejl. Prøv igen.";
            Console.WriteLine($"Registrering fejl: {ex.Message}");
        }
        finally
        {
            isSubmitting = false;
            StateHasChanged();
        }
    }


    private void ShowRegister()
    {
        showRegisterForm = true;
        showLoginForm = false;
        errorMessage = string.Empty;
        successMessage = string.Empty;
    }

    private void HideRegister()
    {
        showRegisterForm = false;
        showLoginForm = true;
        errorMessage = string.Empty;
        successMessage = string.Empty;
        registerModel = new RegisterDto(); // Reset form
    }

}
