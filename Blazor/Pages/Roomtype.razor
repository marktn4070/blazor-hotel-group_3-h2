@page "/hotel/{hotelId:int}/roomtype/{roomtypeId:int}"
@using DomainModels
@inject Blazor.Services.APIService ApiService
@using System.Net.Http
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JS

<PageTitle>Suite Dreams - Roomtype</PageTitle>
@if (roomtypesInHotel == null)
{
	<p><em>Loading roomtype...</em></p>
}
else if (roomtypesInHotel.Length == 0)
{
	<div class="alert alert-info">No roomtype found.</div>
}
else
{
	<div class="container">

			<div class="row align-items-center mb-5">
				<div class="col-md-6">
					<div id="@carouselId" class="carousel slide">
						<div class="carousel-indicators">
							@for (int i = 0; i < 6; i++)
							{
								<button type="button" data-bs-target="#@carouselId" data-bs-slide-to="@i"
										class="@(i == 0 ? "active" : "")"
										aria-current="@(i == 0 ? "true" : "false")"
										aria-label="Slide @(i + 1)"></button>
							}
						</div>

						<div class="carousel-inner">
						@for (int i = 0; i < 6; i++)
						{
							<div class="carousel-item @(i == 0 ? "active" : "")">
								<img src="@($"/images/rooms/Hotel_{hotelId}/Roomtype_{roomtypeId}/{i + 1}.jpg")" class="d-block w-100 rounded" alt="@roomtype.Name" style="object-fit:cover; max-height:310px; width:100%;" />
							</div>
						}	
					</div>

						<button class="carousel-control-prev" type="button" data-bs-target="#@carouselId" data-bs-slide="prev">
							<span class="carousel-control-prev-icon" aria-hidden="true"></span>
							<span class="visually-hidden">Previous</span>
						</button>
						<button class="carousel-control-next" type="button" data-bs-target="#@carouselId" data-bs-slide="next">
							<span class="carousel-control-next-icon" aria-hidden="true"></span>
							<span class="visually-hidden">Next</span>
						</button>
					</div>
				</div>

				<div class="col-md-6">
				<h4 class="fw-bold">@roomtype.Name</h4>
				<p class="text-muted">@roomtype.Description</p>

					<div class="mt-3">
					<a class="btn btn-primary" href="/hotel/@hotelId/roomtype/@roomtype.Id">BOOK NOW</a>
					</div>
				</div>
			</div>
	</div>
}

@code {
	[Parameter] public int hotelId { get; set; }

	private RoomGetDto[]? rooms;
	private RoomtypeGetDto[]? roomtypes;
	private RoomtypeGetDto[]? roomtypesInHotel;
	private HotelDetailsDto? hotel;
	private string carouselId= string.Empty;



	[Parameter]
	public int roomtypeId { get; set; }
	private bool foundHotel = true;

	private RoomtypeGetDto? roomtype;

	protected override async Task OnInitializedAsync()
	{
		carouselId = $"carousel-{hotelId}-{roomtypeId}";
		try
		{
			roomtype = await ApiService.GetRoomType(roomtypeId);
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Fejl ved hentning af rumtype med id'et {roomtypeId}: {ex.Message}", roomtypeId);
		}
	}

	protected override async Task OnParametersSetAsync()
	{
		try
		{
			hotel = await ApiService.GetHotelByIdAsync(hotelId);
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Fejl ved hentning af rumtype med id'et {hotelId}: {ex.Message}", hotelId);
			hotel = null;
			foundHotel = false;
		}

		try
		{
			rooms = await ApiService.GetRoomsAsync(0);
			if (rooms != null && rooms.Length > 1)
			{
				rooms = rooms.OrderBy(r => r.Id).ToArray();
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Fejl ved hentning af rum: {ex.Message}");
			rooms = Array.Empty<RoomGetDto>();
		}

		try
		{
			roomtypes = await ApiService.GetRoomtypesAsync(0);
			if (roomtypes != null && roomtypes.Length > 1)
			{
				roomtypes = roomtypes.OrderBy(rt => rt.Id).ToArray();
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Fejl ved hentning af rumtyper: {ex.Message}");
			roomtypes = Array.Empty<RoomtypeGetDto>();
		}

		// Henter unikke roomtypeid, hvis tilhørende rum eksistere ud fra nuværrende hotelId
		if (rooms != null && roomtypes != null)
		{
			// HashSet er en liste der kun indeholder unikke værdier
			var roomtypeIdsForHotel = new HashSet<int>(rooms.Where(r => r.HotelId == hotelId).Select(r => r.RoomtypeId));

			roomtypesInHotel = roomtypes
				.Where(rt => roomtypeIdsForHotel.Contains(rt.Id))
				.OrderBy(rt => rt.Id)
				.ToArray();
		}
		else
		{
			roomtypesInHotel = Array.Empty<RoomtypeGetDto>();
		}

		// Js for billede slider
		try
		{
			await JS.InvokeVoidAsync("initCarousels");
		}
		catch (Exception ex)
		{
			Console.WriteLine($"JS init fejl: {ex.Message}");
		}
	}
}
