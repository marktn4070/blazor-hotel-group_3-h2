@page "/dashboard/booking"
@using System.Net.Http
@using Blazor.Services
@inject AuthenticationService AuthService
@inject APIService ApiService
@inject NavigationManager Navigation


<PageTitle>Suite Dreams - View Bookings</PageTitle>

<div class="view_booking_page">
    <div class="text-center mb-4">
        <h3 class="fw-bold">Dashboard</h3>
    </div>
    @if (bookings == null)
    {
        <p><em>Loading bookings...</em></p>
    }
    else if (bookings.Length == 0)
    {
        <div class="alert alert-info">No bookings found.</div>
    }
    else
    {
        <div class="mx-5">
            <div class="row">
                <div class="col-12">
                    <BookingTable bookings="@bookings" />
                </div>
            </div>
        </div>
    }
</div>



@code {
    private BookingGetDto[]? bookings;
    private bool isLoading = true;
    private string fullToken = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadBookingInfo();

        // Subscribe to authentication state changes
        AuthService.AuthenticationStateChanged += OnAuthenticationStateChanged;
    }

    private async Task LoadBookingInfo()
    {
        isLoading = true;
        StateHasChanged();
        try
        {
            if (await AuthService.IsAuthenticatedAsync())
            {
                // Hent token fra AuthService (localStorage)
                fullToken = await AuthService.GetTokenAsync() ?? string.Empty;

                // Kald API'et med token som parameter
                bookings = await ApiService.GetAllBookingsAsync(0, fullToken);
    
                // Sortér efter BookingId i stigende rækkefølge
                if (bookings != null && bookings.Length > 1)
                        bookings = bookings.OrderBy(b => b.Id).ToArray();
                }
            else
            {
                bookings = null;
                Navigation.NavigateTo("/login");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Fejl ved hentning af brugere: {ex.Message}");
            bookings = Array.Empty<BookingGetDto>();
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }



    private async void OnAuthenticationStateChanged(object? sender, bool isAuthenticated)
    {
        if (!isAuthenticated)
        {
            bookings = null;
            Navigation.NavigateTo("/login");
        }
        else
        {
            await LoadBookingInfo();
        }

        await InvokeAsync(StateHasChanged);
    }
}
